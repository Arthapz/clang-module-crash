export module Foo;

import std;

template<typename T, typename ... Args>
concept EnableCtor = sizeof...(Args) != 1 || (sizeof...(Args) == 1 && !std::same_as<T, typename std::remove_cvref<Args...>::type>);

export {
template<class T, bool A = false>
class Foo {
  public:
    template<class... Args>
        requires (EnableCtor<Foo<T, A>, Args...>)
    explicit (sizeof...(Args) == 1) Foo(Args&&... args);

    template<class... Args>
    auto init(Args&&... args) -> void;
};
}

template<class T, bool A>
template<class... Args>
    requires (EnableCtor<Foo<T, A>, Args...>)
inline Foo<T, A>::Foo(Args&&... args) {
    init(std::forward<Args>(args)...);
}

template<class T, bool A>
template<class... Args>
inline auto Foo<T, A>::init(Args&&... args) -> void {
    auto _ = std::make_unique<T>(std::forward<Args>(args)...);
}
